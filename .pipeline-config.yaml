# .pipeline-config.yaml
# This is a simplified example.
# Replace placeholders like <HCP_ORG_NAME>, <HCP_WORKSPACE_NAME>
# and secret names with your actual values.

stages:
  - name: Provision Infrastructure via HCP Terraform
    triggers:
      - type: git
        params:
          branch: main # Trigger on main branch changes for infrastructure
    jobs:
      - name: Trigger HCP Terraform Run
        worker: ubuntu
        script: |
          # Install Terraform CLI (needed for 'terraform output' in subsequent steps if not directly calling HCP API)
          # or use 'curl' commands to directly interact with HCP Terraform API for runs.
          # For simplicity, we'll demonstrate a basic curl approach to trigger.

          # Authenticate to HCP Terraform (using API token)
          # HCP_TFE_TOKEN is pulled from IBM Cloud Secrets Manager
          # WORKSPACE_ID can be looked up using HCP Terraform API or hardcoded if stable
          # For a demo, you can hardcode WORKSPACE_ID after you create it in HCP Terraform
          # Or use the workspace name to get its ID via HCP API:
          # WORKSPACE_ID=$(curl -s --header "Authorization: Bearer ${HCP_TFE_TOKEN}" \
          # --header "Content-Type: application/vnd.api+json" \
          # "https://app.terraform.io/api/v2/organizations/<HCP_ORG_NAME>/workspaces?filter[name]=<HCP_WORKSPACE_NAME>" | \
          # jq -r '.data[0].id')

          # Alternatively, if your pipeline worker has Terraform CLI installed and configured for remote backend:
          # terraform init -backend-config="hostname=app.terraform.io" -backend-config="organization=<HCP_ORG_NAME>"
          # terraform workspace select <HCP_WORKSPACE_NAME> || terraform workspace new <HCP_WORKSPACE_NAME>
          # terraform apply -auto-approve

          # --- Option 1: Trigger run via HCP Terraform API (recommended for pipeline) ---
          # Find the workspace ID (replace with your actual Org and Workspace Name)
          HCP_WORKSPACE_ID=$(curl -s \
            --header "Authorization: Bearer ${HCP_TFE_TOKEN}" \
            --header "Content-Type: application/vnd.api+json" \
            "https://app.terraform.io/api/v2/organizations/${HCP_ORG_NAME}/workspaces?filter[name]=${HCP_WORKSPACE_NAME}" | \
            jq -r '.data[0].id')

          if [ -z "$HCP_WORKSPACE_ID" ]; then
            echo "Error: Could not find HCP Terraform workspace ID for ${HCP_WORKSPACE_NAME}."
            exit 1
          fi
          echo "HCP Terraform Workspace ID: ${HCP_WORKSPACE_ID}"

          # Create a new run (plan and apply)
          RUN_RESPONSE=$(curl -s -X POST \
            --header "Authorization: Bearer ${HCP_TFE_TOKEN}" \
            --header "Content-Type: application/vnd.api+json" \
            --data-binary @- "https://app.terraform.io/api/v2/runs" <<EOF
          {
            "data": {
              "attributes": {
                "is-destroy": false,
                "message": "Triggered by IBM Cloud CD pipeline"
              },
              "relationships": {
                "workspace": {
                  "data": {
                    "type": "workspaces",
                    "id": "${HCP_WORKSPACE_ID}"
                  }
                }
              },
              "type": "runs"
            }
          }
          EOF
          )

          RUN_ID=$(echo "$RUN_RESPONSE" | jq -r '.data.id')
          echo "HCP Terraform Run ID: ${RUN_ID}"

          if [ -z "$RUN_ID" ]; then
            echo "Error: Failed to trigger HCP Terraform run."
            echo "Response: $RUN_RESPONSE"
            exit 1
          fi

          # Poll the run status until complete (applied or errored)
          RUN_STATUS=""
          while [[ "$RUN_STATUS" != "applied" && "$RUN_STATUS" != "errored" && "$RUN_STATUS" != "canceled" && "$RUN_STATUS" != "discarded" ]]; do
            echo "Polling HCP Terraform run status... Current status: ${RUN_STATUS}"
            sleep 15 # Adjust polling interval as needed
            RUN_STATUS=$(curl -s \
              --header "Authorization: Bearer ${HCP_TFE_TOKEN}" \
              "https://app.terraform.io/api/v2/runs/${RUN_ID}" | jq -r '.data.attributes.status')
          done

          echo "HCP Terraform run completed with status: ${RUN_STATUS}"

          if [[ "$RUN_STATUS" != "applied" ]]; then
            echo "HCP Terraform run failed or was not applied successfully. Exiting."
            exit 1
          fi

          # Get Terraform outputs from HCP Terraform
          # This assumes you have `jq` installed on your pipeline worker.
          TF_OUTPUTS=$(curl -s \
            --header "Authorization: Bearer ${HCP_TFE_TOKEN}" \
            "https://app.terraform.io/api/v2/workspaces/${HCP_WORKSPACE_ID}/outputs" | jq -r '.')

          WEB_SERVER_IP=$(echo "$TF_OUTPUTS" | jq -r '.data[] | select(.attributes.name=="web_server_ip") | .attributes.value')

          if [ -z "$WEB_SERVER_IP" ]; then
            echo "Error: Could not retrieve web_server_ip from HCP Terraform outputs."
            exit 1
          fi

          echo "Web Server IP: ${WEB_SERVER_IP}"
          echo "WEB_SERVER_IP=${WEB_SERVER_IP}" > /tmp/pipeline_vars.env
        env:
          - name: HCP_TFE_TOKEN
            valueFrom:
              secretRef: hcp-terraform-api-token # Name of your secret in IBM Cloud Secrets Manager
          - name: HCP_ORG_NAME
            value: your-hcp-organization-name # Replace with your HCP Org name
          - name: HCP_WORKSPACE_NAME
            value: ibm-cloud-web-app-infra # Replace with your HCP Workspace name

  - name: Deploy Application with Ansible
    triggers:
      - type: stage
        params:
          stage: Provision Infrastructure via HCP Terraform
          status: success
    jobs:
      - name: Run Ansible Playbook
        worker: ubuntu
        script: |
          source /tmp/pipeline_vars.env # Load IP from previous stage
          cd ansible-playbooks
          echo "[webservers]" > inventory.ini
          echo "${WEB_SERVER_IP} ansible_user=root ansible_ssh_private_key_file=./ssh_key" >> inventory.ini

          # Securely retrieve and write the SSH private key
          echo "${SSH_PRIVATE_KEY}" > ssh_key
          chmod 600 ssh_key

          ansible-playbook -i inventory.ini playbook.yml
        env:
          - name: SSH_PRIVATE_KEY
            valueFrom:
              secretRef: web-app-ssh-private-key # Name of your secret in IBM Cloud Secrets Manager
