apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: ibm-cloud-web-app-pipeline
spec:
  # Define parameters that will be passed into the pipeline
  params:
    - name: git-repo-url
      type: string
      description: The URL of the Git repository containing Terraform, Ansible, and app code.
    - name: git-branch
      type: string
      description: The Git branch to clone.
      default: main
    - name: content-base-path
      type: string
      description: Base subdirectory within the cloned repository where 'terraform-configs' and 'ansible-playbooks' are located (e.g., "my-project/deploy"). Default is empty if they are in the repo root.
      default: ""
    - name: hcp-tfe-token
      type: string
      description: HashiCorp Cloud Platform Terraform API Token.
      secret: true
    - name: hcp-org-name
      type: string
      description: HashiCorp Cloud Platform Organization Name.
    - name: hcp-workspace-name
      type: string
      description: HashiCorp Cloud Platform Workspace Name where Terraform will run.
    - name: ssh-private-key
      type: string
      description: Private SSH key to access the provisioned IBM Cloud VSI.
      secret: true

  # Define workspaces for sharing data between tasks
  workspaces:
    - name: pipeline-workspace # This is the main pipeline workspace

  # Define the tasks that make up your pipeline
  tasks:
    # 1. Task to clone the Git repository (inlined, using pipeline params)
    - name: clone-repository
      workspaces:
        - name: output
          workspace: pipeline-workspace
      taskSpec:
        workspaces:
          - name: output
        steps:
          - name: git-clone-step
            image: alpine/git:latest
            script: |
              set -eu
              GIT_REPO_URL="$(params.git-repo-url)"
              GIT_BRANCH="$(params.git-branch)"
              DEST_PATH="$(workspaces.output.path)"

              echo "Cloning repository: ${GIT_REPO_URL} branch: ${GIT_BRANCH}"

              if [ -d "$DEST_PATH" ]; then
                echo "Destination path '$DEST_PATH' already exists. Cleaning up contents..."
                rm -rf "${DEST_PATH}"/* "${DEST_PATH}"/.[!.]* || true 
              fi

              git clone --depth=1 --branch="${GIT_BRANCH}" "${GIT_REPO_URL}" "${DEST_PATH}"
              echo "Repository cloned successfully to ${DEST_PATH}/"
              ls -la "${DEST_PATH}"

    # 2. Task to provision infrastructure via HCP Terraform
    - name: provision-infrastructure
      runAfter: ["clone-repository"]
      workspaces:
        - name: source
          workspace: pipeline-workspace
      params:
        - name: hcp-tfe-token
          value: $(params.hcp-tfe-token)
        - name: hcp-org-name
          value: $(params.hcp-org-name)
        - name: hcp-workspace-name
          value: $(params.hcp-workspace-name)
        - name: content-base-path
          value: $(params.content-base-path)
      taskSpec:
        workspaces:
          - name: source
        params:
          - name: hcp-tfe-token
            type: string
            secret: true
          - name: hcp-org-name
            type: string
          - name: hcp-workspace-name
            type: string
          - name: content-base-path
            type: string
        steps:
          - name: trigger-hcp-run
            image: ubuntu:latest
            script: |
              set -eu
              set -x # Enable shell debugging - IMPORTANT!

              echo "Updating apt cache and installing curl, jq..."
              apt-get update && apt-get install -y curl jq

              HCP_TFE_TOKEN="$(params.hcp-tfe-token)"
              HCP_ORG_NAME="$(params.hcp-org-name)"
              HCP_WORKSPACE_NAME="$(params.hcp-workspace-name)"
              
              REPO_BASE_PATH="$(params.content-base-path)"
              TERRAFORM_CONFIGS_DIR="$(workspaces.source.path)/${REPO_BASE_PATH}/terraform-configs"
              
              echo "Navigating to Terraform configuration directory: ${TERRAFORM_CONFIGS_DIR}"
              cd "${TERRAFORM_CONFIGS_DIR}"

              echo "Retrieving HCP Terraform Workspace ID for ${HCP_WORKSPACE_NAME}..."
              WORKSPACE_QUERY_RESPONSE=$(curl \
                --header "Authorization: Bearer ${HCP_TFE_TOKEN}" \
                --header "Content-Type: application/vnd.api+json" \
                "https://app.terraform.io/api/v2/organizations/${HCP_ORG_NAME}/workspaces?filter%5Bname%5D=${HCP_WORKSPACE_NAME}")
              
              echo "Raw Workspace Query Response:"
              echo "${WORKSPACE_QUERY_RESPONSE}"

              HCP_WORKSPACE_ID=$(echo "${WORKSPACE_QUERY_RESPONSE}" | jq -r '.data[0].id')

              if [ -z "$HCP_WORKSPACE_ID" ] || [ "$HCP_WORKSPACE_ID" = "null" ]; then
                echo "Error: Could not find HCP Terraform workspace ID for ${HCP_WORKSPACE_NAME}. Response: ${WORKSPACE_QUERY_RESPONSE}"
                exit 1
              fi
              echo "HCP Terraform Workspace ID: ${HCP_WORKSPACE_ID}"

              echo "Triggering new run in HCP Terraform..."
              RUN_RESPONSE=$(curl -X POST \
                --header "Authorization: Bearer ${HCP_TFE_TOKEN}" \
                --header "Content-Type: application/vnd.api+json" \
                --data-binary @- "https://app.terraform.io/api/v2/runs" <<EOF
              {
                "data": {
                  "attributes": {
                    "is-destroy": false,
                    "message": "Triggered by IBM Cloud CD Tekton pipeline"
                  },
                  "relationships": {
                    "workspace": {
                      "data": {
                        "type": "workspaces",
                        "id": "${HCP_WORKSPACE_ID}"
                      }
                    }
                  },
                  "type": "runs"
                }
              }
              EOF
              )
              echo "Raw Run Trigger Response:"
              echo "${RUN_RESPONSE}"

              RUN_ID=$(echo "$RUN_RESPONSE" | jq -r '.data.id')
              echo "HCP Terraform Run ID: ${RUN_ID}"

              if [ -z "$RUN_ID" ] || [ "$RUN_ID" = "null" ]; then
                echo "Error: Failed to trigger HCP Terraform run. Response: $RUN_RESPONSE"
                exit 1
              fi

              echo "Polling HCP Terraform run status. View run at: https://app.terraform.io/app/${HCP_ORG_NAME}/workspaces/${HCP_WORKSPACE_NAME}/runs/${RUN_ID}"
              RUN_STATUS=""
              
              # Loop until the run is in a terminal state (applied, errored, canceled, discarded)
              # OR it reaches 'needs_confirmation' for auto-approval
              while [ "$RUN_STATUS" != "applied" ] && \
                    [ "$RUN_STATUS" != "errored" ] && \
                    [ "$RUN_STATUS" != "canceled" ] && \
                    [ "$RUN_STATUS" != "discarded" ] && \
                    [ "$RUN_STATUS" != "needs_confirmation" ] && \ # Added needs_confirmation
                    [ "$RUN_STATUS" != "planned_and_finished" ]; do # <-- ADD THIS LINE
                
                echo "Current status: ${RUN_STATUS}. Waiting 15 seconds..."
                sleep 15
                
                RUN_STATUS_RESPONSE=$(curl \
                  --header "Authorization: Bearer ${HCP_TFE_TOKEN}" \
                  "https://app.terraform.io/api/v2/runs/${RUN_ID}")
                
                echo "Raw Run Status Response:"
                echo "${RUN_STATUS_RESPONSE}"
                RUN_STATUS=$(echo "${RUN_STATUS_RESPONSE}" | jq -r '.data.attributes.status')
                echo "Parsed RUN_STATUS: ${RUN_STATUS}"
              done

              echo "HCP Terraform run completed with status: ${RUN_STATUS}"

              # Check if the run needs confirmation and auto-approve it
              if [ "$RUN_STATUS" = "needs_confirmation" ]; then
                echo "Run needs confirmation. Auto-approving..."
                APPROVE_RESPONSE=$(curl -X POST \
                  --header "Authorization: Bearer ${HCP_TFE_TOKEN}" \
                  --header "Content-Type: application/vnd.api+json" \
                  "https://app.terraform.io/api/v2/runs/${RUN_ID}/actions/apply")
                
                echo "Raw Auto-Approve Response:"
                echo "${APPROVE_RESPONSE}"

                # Re-poll status after approval to wait for 'applied'
                RUN_STATUS="" # Reset status to re-enter loop
                echo "Waiting for run to apply after auto-approval..."
                while [ "$RUN_STATUS" != "applied" ] && \
                      [ "$RUN_STATUS" != "errored" ] && \
                      [ "$RUN_STATUS" != "canceled" ] && \
                      [ "$RUN_STATUS" != "discarded" ]; do
                  
                  echo "Current status: ${RUN_STATUS}. Waiting 15 seconds..."
                  sleep 15
                  
                  RUN_STATUS_RESPONSE=$(curl \
                    --header "Authorization: Bearer ${HCP_TFE_TOKEN}" \
                    "https://app.terraform.io/api/v2/runs/${RUN_ID}")
                  
                  echo "Raw Run Status Response:"
                  echo "${RUN_STATUS_RESPONSE}"
                  RUN_STATUS=$(echo "${RUN_STATUS_RESPONSE}" | jq -r '.data.attributes.status')
                  echo "Parsed RUN_STATUS: ${RUN_STATUS}"
                done
                echo "HCP Terraform run completed with status: ${RUN_STATUS} after auto-approval."
              fi

              # Final check for successful application
              if [ "$RUN_STATUS" = "applied" ] || [ "$RUN_STATUS" = "planned_and_finished" ]; then
                echo "HCP Terraform run completed successfully with status ${RUN_STATUS}"
              else
                echo "HCP Terraform run completed with status ${RUN_STATUS}, which is not a successful outcome."
                echo "Please check the run logs in HCP Terraform at https://app.terraform.io/app/${HCP_ORG_NAME}/workspaces/${HCP_WORKSPACE_NAME}/runs/${RUN_ID} for details."
                exit 1 # Failure for any other terminal status
              fi

              echo "Retrieving Terraform outputs..."
              TF_OUTPUTS_RESPONSE=$(curl \
                --header "Authorization: Bearer ${HCP_TFE_TOKEN}" \ 
                --header "Content-Type: application/vnd.api+json" \
                "https://app.terraform.io/api/v2/workspaces/${HCP_WORKSPACE_ID}/current-state-version?include=outputs")
              
              echo "Raw Terraform Outputs Response:"
              echo "${TF_OUTPUTS_RESPONSE}"

              TF_OUTPUTS=$(echo "$TF_OUTPUTS_RESPONSE" | jq -r '.')

              WEB_SERVER_IP=$(echo "$TF_OUTPUTS" | jq -r '.data[] | select(.attributes.name=="web_server_public_ip") | .attributes.value')

              if [ -z "$WEB_SERVER_IP" ] || [ "$WEB_SERVER_IP" = "null" ]; then
                echo "Error Could not retrieve web_server_ip from HCP Terraform outputs. Raw outputs: ${TF_OUTPUTS_RESPONSE}"
                exit 1
              fi

              echo "Web Server IP ${WEB_SERVER_IP}"
              echo "WEB_SERVER_IP=${WEB_SERVER_IP}" > "$(workspaces.source.path)/web_server_ip.env"
              
              # Now exit successfully after all steps are complete
              exit 0 # Success!

    # 3. Task to deploy application with Ansible
    - name: deploy-application
      runAfter: ["provision-infrastructure"]
      workspaces:
        - name: source
          workspace: pipeline-workspace
      params:
        - name: ssh-private-key
          value: $(params.ssh-private-key)
        - name: content-base-path
          value: $(params.content-base-path)
      taskSpec:
        workspaces:
          - name: source
        params:
          - name: ssh-private-key
            type: string
            secret: true
          - name: content-base-path
            type: string
        steps:
          - name: run-ansible-playbook
            image: ubuntu:latest
            script: |
              set -eu
              set -x # Enable shell debugging - IMPORTANT!

              echo "Updating apt cache and installing Ansible, sshpass..."
              apt-get update && apt-get install -y ansible sshpass

              REPO_BASE_PATH="$(params.content-base-path)"
              ANSIBLE_PLAYBOOKS_DIR="$(workspaces.source.path)/${REPO_BASE_PATH}/ansible-playbooks"
              
              . "$(workspaces.source.path)/web_server_ip.env"
              echo "Loaded WEB_SERVER_IP: $WEB_SERVER_IP"

              echo "[webservers]" > "${ANSIBLE_PLAYBOOKS_DIR}/inventory.ini"
              echo "${WEB_SERVER_IP} ansible_user=root ansible_ssh_private_key_file=${ANSIBLE_PLAYBOOKS_DIR}/ssh_key" >> "${ANSIBLE_PLAYBOOKS_DIR}/inventory.ini"

              echo "$(params.ssh-private-key)" > "${ANSIBLE_PLAYBOOKS_DIR}/ssh_key"
              chmod 600 "${ANSIBLE_PLAYBOOKS_DIR}/ssh_key"

              echo "Navigating to Ansible playbooks directory: ${ANSIBLE_PLAYBOOKS_DIR}"
              cd "${ANSIBLE_PLAYBOOKS_DIR}"
              
              echo "Running Ansible playbook..."
              ansible-playbook -i inventory.ini playbook.yml
              echo "Ansible playbook execution complete."
