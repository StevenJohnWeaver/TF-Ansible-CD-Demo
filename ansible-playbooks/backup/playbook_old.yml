---
- name: Deploy Node.js application to EC2 instance
  hosts: all # This targets all hosts defined in your Ansible inventory
  remote_user: ec2-user # Connect to the EC2 instance as 'ec2-user'
  become: yes # Use sudo for tasks that require root privileges (e.g., package installation)

  vars:
    app_dir: /home/ec2-user/my_node_app # The directory where the app will be deployed on EC2
    app_name: my_web_app # A friendly name for your application process in pm2

  tasks:
    - name: Update dnf cache
      ansible.builtin.dnf:
        update_cache: yes
      when: ansible_os_family == "RedHat" # Amazon Linux falls under RedHat os_family

    - name: Enable Node.js module stream (e.g., nodejs:20 for LTS)
      ansible.builtin.command: dnf module enable -y nodejs:20 # You can choose a different version like nodejs:18
      args:
        creates: /etc/dnf/modules.d/nodejs.module # This prevents running the command if already enabled
      when: ansible_os_family == "RedHat"

    - name: Install Node.js and npm via dnf
      ansible.builtin.dnf:
        name: "{{ item }}"
        state: present
      loop:
        - nodejs
        - npm
      when: ansible_os_family == "RedHat"

    - name: Install pm2 globally
      # Using npm module to install pm2 globally.
      # This task uses 'become: yes' as global npm packages often require root privileges.
      ansible.builtin.npm:
        name: pm2
        global: yes
        state: present

    - name: Create application directory
      ansible.builtin.file:
        path: "{{ app_dir }}"
        state: directory
        owner: ec2-user # Ensure the directory is owned by the ec2-user
        group: ec2-user
        mode: '0755'
      become: no # Ensure this is run as the ec2-user after 'become:yes' has been used for system wide installs.

    - name: Copy app.js to the application directory
      ansible.builtin.copy:
        src: ./app_code/app.js # Source path on your local machine/pipeline runner
        dest: "{{ app_dir }}/app.js" # Destination path on the EC2 instance
        owner: ec2-user
        group: ec2-user
      become: no # Copy as ec2-user

    - name: Copy package.json to the application directory
      ansible.builtin.copy:
        src: ./app_code/package.json # Source path on your local machine/pipeline runner
        dest: "{{ app_dir }}/package.json" # Destination path on the EC2 instance
        owner: ec2-user
        group: ec2-user
      register: package_json_copy_result
      become: no # Copy as ec2-user
      ignore_errors: yes # Allows the playbook to continue if package.json is not found locally

    - name: Check if package.json exists on the target system
      ansible.builtin.stat:
        path: "{{ app_dir }}/package.json"
      register: remote_package_json_stat
      delegate_to: "{{ inventory_hostname }}" # Run this stat check on the remote host

    - name: Install Node.js dependencies (if package.json exists)
      community.general.npm:
        path: "{{ app_dir }}"
      become: no # npm install should run as the application owner (ec2-user)
      when: remote_package_json_stat.stat.exists # Only run if package.json was successfully copied or already exists

    - name: Start/Restart Node.js application with pm2
      ansible.builtin.command: pm2 start "{{ app_dir }}/app.js" --name "{{ app_name }}" --force
      args:
        chdir: "{{ app_dir }}" # Change into the app directory before running pm2
      become: no # pm2 commands should run as the application owner (ec2-user)
      register: pm2_start_result
      changed_when: "'launched' in pm2_start_result.stdout or 'restarted' in pm2_start_result.stdout"

    - name: Save pm2 process list for persistence (optional, highly recommended)
      # This command saves the pm2 process list so your app can restart automatically after reboot.
      # You might need to run `pm2 startup` manually once on the EC2 instance if it's the first time
      # to enable systemd/init.d integration for pm2.
      ansible.builtin.command: pm2 save
      become: no # pm2 save should run as the application owner (ec2-user)
